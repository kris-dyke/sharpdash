/*
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using pointofsale.cloud.doordash.Client;
using pointofsale.cloud.doordash.Model;
using RestSharp;

namespace pointofsale.cloud.doordash.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStoresApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>StoreInfo</returns>
        StoreInfo GetStoreInfo (string merchantSuppliedId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>ApiResponse of StoreInfo</returns>
        ApiResponse<StoreInfo> GetStoreInfoWithHttpInfo (string merchantSuppliedId);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store menu details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>StoreMenuInfo</returns>
        StoreMenuInfo GetStoreMenuInfo (string merchantSuppliedId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store menu details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>ApiResponse of StoreMenuInfo</returns>
        ApiResponse<StoreMenuInfo> GetStoreMenuInfoWithHttpInfo (string merchantSuppliedId);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        void PatchItemBatchUpdate (string merchantSuppliedId, List<UpdateItem> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchItemBatchUpdateWithHttpInfo (string merchantSuppliedId, List<UpdateItem> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        void PutItemActivationStatus (string merchantSuppliedId, List<ItemActivation> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutItemActivationStatusWithHttpInfo (string merchantSuppliedId, List<ItemActivation> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        void PutItemOptionActivationStatus (string merchantSuppliedId, List<ItemOptionActivation> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutItemOptionActivationStatusWithHttpInfo (string merchantSuppliedId, List<ItemOptionActivation> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns></returns>
        void PutStoreActivationStatus (string merchantSuppliedId, StoreActivationStatus payload, string reason = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutStoreActivationStatusWithHttpInfo (string merchantSuppliedId, StoreActivationStatus payload, string reason = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of StoreInfo</returns>
        System.Threading.Tasks.Task<StoreInfo> GetStoreInfoAsync (string merchantSuppliedId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of ApiResponse (StoreInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoreInfo>> GetStoreInfoAsyncWithHttpInfo (string merchantSuppliedId);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store menu details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of StoreMenuInfo</returns>
        System.Threading.Tasks.Task<StoreMenuInfo> GetStoreMenuInfoAsync (string merchantSuppliedId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        /// Get live store menu details providing a new level of visibility
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of ApiResponse (StoreMenuInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoreMenuInfo>> GetStoreMenuInfoAsyncWithHttpInfo (string merchantSuppliedId);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchItemBatchUpdateAsync (string merchantSuppliedId, List<UpdateItem> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchItemBatchUpdateAsyncWithHttpInfo (string merchantSuppliedId, List<UpdateItem> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutItemActivationStatusAsync (string merchantSuppliedId, List<ItemActivation> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutItemActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, List<ItemActivation> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutItemOptionActivationStatusAsync (string merchantSuppliedId, List<ItemOptionActivation> payload);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutItemOptionActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, List<ItemOptionActivation> payload);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutStoreActivationStatusAsync (string merchantSuppliedId, StoreActivationStatus payload, string reason = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutStoreActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, StoreActivationStatus payload, string reason = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StoresApi : IStoresApi
    {
        ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StoresApi(String basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StoresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StoresApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Get live store details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>StoreInfo</returns>
        public StoreInfo GetStoreInfo (string merchantSuppliedId)
        {
             ApiResponse<StoreInfo> localVarResponse = GetStoreInfoWithHttpInfo(merchantSuppliedId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get live store details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>ApiResponse of StoreInfo</returns>
        public ApiResponse< StoreInfo > GetStoreInfoWithHttpInfo (string merchantSuppliedId)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->GetStoreInfo");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreInfo)));
        }

        /// <summary>
        ///  Get live store details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of StoreInfo</returns>
        public async System.Threading.Tasks.Task<StoreInfo> GetStoreInfoAsync (string merchantSuppliedId)
        {
             ApiResponse<StoreInfo> localVarResponse = await GetStoreInfoAsyncWithHttpInfo(merchantSuppliedId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get live store details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of ApiResponse (StoreInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoreInfo>> GetStoreInfoAsyncWithHttpInfo (string merchantSuppliedId)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->GetStoreInfo");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreInfo)));
        }

        /// <summary>
        ///  Get live store menu details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>StoreMenuInfo</returns>
        public StoreMenuInfo GetStoreMenuInfo (string merchantSuppliedId)
        {
             ApiResponse<StoreMenuInfo> localVarResponse = GetStoreMenuInfoWithHttpInfo(merchantSuppliedId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get live store menu details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>ApiResponse of StoreMenuInfo</returns>
        public ApiResponse< StoreMenuInfo > GetStoreMenuInfoWithHttpInfo (string merchantSuppliedId)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->GetStoreMenuInfo");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/menu_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreMenuInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreMenuInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreMenuInfo)));
        }

        /// <summary>
        ///  Get live store menu details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of StoreMenuInfo</returns>
        public async System.Threading.Tasks.Task<StoreMenuInfo> GetStoreMenuInfoAsync (string merchantSuppliedId)
        {
             ApiResponse<StoreMenuInfo> localVarResponse = await GetStoreMenuInfoAsyncWithHttpInfo(merchantSuppliedId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get live store menu details providing a new level of visibility
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <returns>Task of ApiResponse (StoreMenuInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoreMenuInfo>> GetStoreMenuInfoAsyncWithHttpInfo (string merchantSuppliedId)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->GetStoreMenuInfo");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/menu_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreMenuInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreMenuInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreMenuInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreMenuInfo)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        public void PatchItemBatchUpdate (string merchantSuppliedId, List<UpdateItem> payload)
        {
             PatchItemBatchUpdateWithHttpInfo(merchantSuppliedId, payload);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchItemBatchUpdateWithHttpInfo (string merchantSuppliedId, List<UpdateItem> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PatchItemBatchUpdate");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PatchItemBatchUpdate");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchItemBatchUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchItemBatchUpdateAsync (string merchantSuppliedId, List<UpdateItem> payload)
        {
             await PatchItemBatchUpdateAsyncWithHttpInfo(merchantSuppliedId, payload);

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchItemBatchUpdateAsyncWithHttpInfo (string merchantSuppliedId, List<UpdateItem> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PatchItemBatchUpdate");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PatchItemBatchUpdate");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchItemBatchUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        public void PutItemActivationStatus (string merchantSuppliedId, List<ItemActivation> payload)
        {
             PutItemActivationStatusWithHttpInfo(merchantSuppliedId, payload);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutItemActivationStatusWithHttpInfo (string merchantSuppliedId, List<ItemActivation> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutItemActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutItemActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/item/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutItemActivationStatusAsync (string merchantSuppliedId, List<ItemActivation> payload)
        {
             await PutItemActivationStatusAsyncWithHttpInfo(merchantSuppliedId, payload);

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutItemActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, List<ItemActivation> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutItemActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutItemActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/item/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns></returns>
        public void PutItemOptionActivationStatus (string merchantSuppliedId, List<ItemOptionActivation> payload)
        {
             PutItemOptionActivationStatusWithHttpInfo(merchantSuppliedId, payload);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutItemOptionActivationStatusWithHttpInfo (string merchantSuppliedId, List<ItemOptionActivation> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutItemOptionActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutItemOptionActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/item_option/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemOptionActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutItemOptionActivationStatusAsync (string merchantSuppliedId, List<ItemOptionActivation> payload)
        {
             await PutItemOptionActivationStatusAsyncWithHttpInfo(merchantSuppliedId, payload);

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External ID of Store</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutItemOptionActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, List<ItemOptionActivation> payload)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutItemOptionActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutItemOptionActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/item_option/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemOptionActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns></returns>
        public void PutStoreActivationStatus (string merchantSuppliedId, StoreActivationStatus payload, string reason = null)
        {
             PutStoreActivationStatusWithHttpInfo(merchantSuppliedId, payload, reason);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutStoreActivationStatusWithHttpInfo (string merchantSuppliedId, StoreActivationStatus payload, string reason = null)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutStoreActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutStoreActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (reason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reason", reason)); // query parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStoreActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutStoreActivationStatusAsync (string merchantSuppliedId, StoreActivationStatus payload, string reason = null)
        {
             await PutStoreActivationStatusAsyncWithHttpInfo(merchantSuppliedId, payload, reason);

        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="pointofsale.cloud.doordash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSuppliedId">External id of store</param>
        /// <param name="payload"></param>
        /// <param name="reason">[&#39;out_of_business&#39;, &#39;delete_store&#39;, &#39;payment_issue&#39;, &#39;operational_issues&#39;, &#39;store_self_disabled_in_their_POS_portal&#39;, &#39;store_pos_connectivity_issues&#39;] (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutStoreActivationStatusAsyncWithHttpInfo (string merchantSuppliedId, StoreActivationStatus payload, string reason = null)
        {
            // verify the required parameter 'merchantSuppliedId' is set
            if (merchantSuppliedId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSuppliedId' when calling Apiv1storesApi->PutStoreActivationStatus");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling Apiv1storesApi->PutStoreActivationStatus");

            var localVarPath = "/api/v1/stores/{merchant_supplied_id}/activation-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSuppliedId != null) localVarPathParams.Add("merchant_supplied_id", Configuration.ApiClient.ParameterToString(merchantSuppliedId)); // path parameter
            if (reason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reason", reason)); // query parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutStoreActivationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}