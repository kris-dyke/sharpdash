/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract]
    public class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructor]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="name">the given name of this instance (required).</param>
        /// <param name="description">description.</param>
        /// <param name="merchantSuppliedId">ID as it&#39;s stored in your system (required).</param>
        /// <param name="active">active (default to true).</param>
        /// <param name="isAlcohol">isAlcohol.</param>
        /// <param name="isBikeFriendly">isBikeFriendly.</param>
        /// <param name="sortId">sortId.</param>
        /// <param name="price">price (required).</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="extras">extras.</param>
        /// <param name="taxRate">taxRate.</param>
        /// <param name="originalImageUrl">Item image URL in JPG|JPEG|PNG format, min resolution (1600w x 800h), aspect ratio 16:9 and max size 2MB. Initial image ingestion will go through approval process.</param>
        public Item(string name = default(string), string description = default(string), string merchantSuppliedId = default(string), bool? active = true, bool? isAlcohol = default(bool?), bool? isBikeFriendly = default(bool?), int? sortId = default(int?), int? price = default(int?), int? basePrice = default(int?), List<ItemExtra> extras = default(List<ItemExtra>), string taxRate = default(string), string originalImageUrl = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Item and cannot be null");
            }
            else
            {
                Name = name;
            }
            // to ensure "merchantSuppliedId" is required (not null)
            if (merchantSuppliedId == null)
            {
                throw new InvalidDataException("merchantSuppliedId is a required property for Item and cannot be null");
            }
            else
            {
                MerchantSuppliedId = merchantSuppliedId;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for Item and cannot be null");
            }
            else
            {
                Price = price;
            }
            Description = description;
            // use default value if no "active" provided
            if (active == null)
            {
                Active = true;
            }
            else
            {
                Active = active;
            }
            IsAlcohol = isAlcohol;
            IsBikeFriendly = isBikeFriendly;
            SortId = sortId;
            BasePrice = basePrice;
            Extras = extras;
            TaxRate = taxRate;
            OriginalImageUrl = originalImageUrl;
        }
        
        /// <summary>
        /// the given name of this instance
        /// </summary>
        /// <value>the given name of this instance</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// ID as it&#39;s stored in your system
        /// </summary>
        /// <value>ID as it&#39;s stored in your system</value>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets IsAlcohol
        /// </summary>
        [DataMember(Name="is_alcohol", EmitDefaultValue=false)]
        public bool? IsAlcohol { get; set; }

        /// <summary>
        /// Gets or Sets IsBikeFriendly
        /// </summary>
        [DataMember(Name="is_bike_friendly", EmitDefaultValue=false)]
        public bool? IsBikeFriendly { get; set; }

        /// <summary>
        /// Gets or Sets SortId
        /// </summary>
        [DataMember(Name="sort_id", EmitDefaultValue=false)]
        public int? SortId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public int? Price { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name="base_price", EmitDefaultValue=false)]
        public int? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets Extras
        /// </summary>
        [DataMember(Name="extras", EmitDefaultValue=false)]
        public List<ItemExtra> Extras { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public string TaxRate { get; set; }

        /// <summary>
        /// Item image URL in JPG|JPEG|PNG format, min resolution (1600w x 800h), aspect ratio 16:9 and max size 2MB. Initial image ingestion will go through approval process
        /// </summary>
        /// <value>Item image URL in JPG|JPEG|PNG format, min resolution (1600w x 800h), aspect ratio 16:9 and max size 2MB. Initial image ingestion will go through approval process</value>
        [DataMember(Name="original_image_url", EmitDefaultValue=false)]
        public string OriginalImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IsAlcohol: ").Append(IsAlcohol).Append("\n");
            sb.Append("  IsBikeFriendly: ").Append(IsBikeFriendly).Append("\n");
            sb.Append("  SortId: ").Append(SortId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  Extras: ").Append(Extras).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  OriginalImageUrl: ").Append(OriginalImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    Description == input.Description ||
                    Description != null &&
                    Description.Equals(input.Description)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Active == input.Active ||
                    Active != null &&
                    Active.Equals(input.Active)
                ) && 
                (
                    IsAlcohol == input.IsAlcohol ||
                    IsAlcohol != null &&
                    IsAlcohol.Equals(input.IsAlcohol)
                ) && 
                (
                    IsBikeFriendly == input.IsBikeFriendly ||
                    IsBikeFriendly != null &&
                    IsBikeFriendly.Equals(input.IsBikeFriendly)
                ) && 
                (
                    SortId == input.SortId ||
                    SortId != null &&
                    SortId.Equals(input.SortId)
                ) && 
                (
                    Price == input.Price ||
                    Price != null &&
                    Price.Equals(input.Price)
                ) && 
                (
                    BasePrice == input.BasePrice ||
                    BasePrice != null &&
                    BasePrice.Equals(input.BasePrice)
                ) && 
                (
                    Extras == input.Extras ||
                    Extras != null &&
                    Extras.SequenceEqual(input.Extras)
                ) && 
                (
                    TaxRate == input.TaxRate ||
                    TaxRate != null &&
                    TaxRate.Equals(input.TaxRate)
                ) && 
                (
                    OriginalImageUrl == input.OriginalImageUrl ||
                    OriginalImageUrl != null &&
                    OriginalImageUrl.Equals(input.OriginalImageUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                if (IsAlcohol != null)
                    hashCode = hashCode * 59 + IsAlcohol.GetHashCode();
                if (IsBikeFriendly != null)
                    hashCode = hashCode * 59 + IsBikeFriendly.GetHashCode();
                if (SortId != null)
                    hashCode = hashCode * 59 + SortId.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (BasePrice != null)
                    hashCode = hashCode * 59 + BasePrice.GetHashCode();
                if (Extras != null)
                    hashCode = hashCode * 59 + Extras.GetHashCode();
                if (TaxRate != null)
                    hashCode = hashCode * 59 + TaxRate.GetHashCode();
                if (OriginalImageUrl != null)
                    hashCode = hashCode * 59 + OriginalImageUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
