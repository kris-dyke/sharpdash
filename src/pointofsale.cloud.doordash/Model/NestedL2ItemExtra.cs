/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// NestedL2ItemExtra
    /// </summary>
    [DataContract]
    public class NestedL2ItemExtra :  IEquatable<NestedL2ItemExtra>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NestedL2ItemExtra" /> class.
        /// </summary>
        [JsonConstructor]
        protected NestedL2ItemExtra() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NestedL2ItemExtra" /> class.
        /// </summary>
        /// <param name="name">the given name of this instance (required).</param>
        /// <param name="description">description.</param>
        /// <param name="merchantSuppliedId">ID as it&#39;s stored in your system.</param>
        /// <param name="active">active (default to true).</param>
        /// <param name="sortId">sortId.</param>
        /// <param name="minNumOptions">minNumOptions.</param>
        /// <param name="maxNumOptions">maxNumOptions.</param>
        /// <param name="numFreeOptions">numFreeOptions.</param>
        /// <param name="minOptionChoiceQuantity">minOptionChoiceQuantity.</param>
        /// <param name="maxOptionChoiceQuantity">maxOptionChoiceQuantity.</param>
        /// <param name="minAggregateOptionsQuantity">minAggregateOptionsQuantity.</param>
        /// <param name="maxAggregateOptionsQuantity">maxAggregateOptionsQuantity.</param>
        /// <param name="options">options.</param>
        public NestedL2ItemExtra(string name = default(string), string description = default(string), string merchantSuppliedId = default(string), bool? active = true, int? sortId = default(int?), int? minNumOptions = default(int?), int? maxNumOptions = default(int?), int? numFreeOptions = default(int?), int? minOptionChoiceQuantity = default(int?), int? maxOptionChoiceQuantity = default(int?), int? minAggregateOptionsQuantity = default(int?), int? maxAggregateOptionsQuantity = default(int?), List<NestedL2ItemExtraOption> options = default(List<NestedL2ItemExtraOption>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NestedL2ItemExtra and cannot be null");
            }
            else
            {
                Name = name;
            }
            Description = description;
            MerchantSuppliedId = merchantSuppliedId;
            // use default value if no "active" provided
            if (active == null)
            {
                Active = true;
            }
            else
            {
                Active = active;
            }
            SortId = sortId;
            MinNumOptions = minNumOptions;
            MaxNumOptions = maxNumOptions;
            NumFreeOptions = numFreeOptions;
            MinOptionChoiceQuantity = minOptionChoiceQuantity;
            MaxOptionChoiceQuantity = maxOptionChoiceQuantity;
            MinAggregateOptionsQuantity = minAggregateOptionsQuantity;
            MaxAggregateOptionsQuantity = maxAggregateOptionsQuantity;
            Options = options;
        }
        
        /// <summary>
        /// the given name of this instance
        /// </summary>
        /// <value>the given name of this instance</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// ID as it&#39;s stored in your system
        /// </summary>
        /// <value>ID as it&#39;s stored in your system</value>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets SortId
        /// </summary>
        [DataMember(Name="sort_id", EmitDefaultValue=false)]
        public int? SortId { get; set; }

        /// <summary>
        /// Gets or Sets MinNumOptions
        /// </summary>
        [DataMember(Name="min_num_options", EmitDefaultValue=false)]
        public int? MinNumOptions { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumOptions
        /// </summary>
        [DataMember(Name="max_num_options", EmitDefaultValue=false)]
        public int? MaxNumOptions { get; set; }

        /// <summary>
        /// Gets or Sets NumFreeOptions
        /// </summary>
        [DataMember(Name="num_free_options", EmitDefaultValue=false)]
        public int? NumFreeOptions { get; set; }

        /// <summary>
        /// Gets or Sets MinOptionChoiceQuantity
        /// </summary>
        [DataMember(Name="min_option_choice_quantity", EmitDefaultValue=false)]
        public int? MinOptionChoiceQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MaxOptionChoiceQuantity
        /// </summary>
        [DataMember(Name="max_option_choice_quantity", EmitDefaultValue=false)]
        public int? MaxOptionChoiceQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MinAggregateOptionsQuantity
        /// </summary>
        [DataMember(Name="min_aggregate_options_quantity", EmitDefaultValue=false)]
        public int? MinAggregateOptionsQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MaxAggregateOptionsQuantity
        /// </summary>
        [DataMember(Name="max_aggregate_options_quantity", EmitDefaultValue=false)]
        public int? MaxAggregateOptionsQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<NestedL2ItemExtraOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NestedL2ItemExtra {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  SortId: ").Append(SortId).Append("\n");
            sb.Append("  MinNumOptions: ").Append(MinNumOptions).Append("\n");
            sb.Append("  MaxNumOptions: ").Append(MaxNumOptions).Append("\n");
            sb.Append("  NumFreeOptions: ").Append(NumFreeOptions).Append("\n");
            sb.Append("  MinOptionChoiceQuantity: ").Append(MinOptionChoiceQuantity).Append("\n");
            sb.Append("  MaxOptionChoiceQuantity: ").Append(MaxOptionChoiceQuantity).Append("\n");
            sb.Append("  MinAggregateOptionsQuantity: ").Append(MinAggregateOptionsQuantity).Append("\n");
            sb.Append("  MaxAggregateOptionsQuantity: ").Append(MaxAggregateOptionsQuantity).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NestedL2ItemExtra);
        }

        /// <summary>
        /// Returns true if NestedL2ItemExtra instances are equal
        /// </summary>
        /// <param name="input">Instance of NestedL2ItemExtra to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NestedL2ItemExtra input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    Description == input.Description ||
                    Description != null &&
                    Description.Equals(input.Description)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Active == input.Active ||
                    Active != null &&
                    Active.Equals(input.Active)
                ) && 
                (
                    SortId == input.SortId ||
                    SortId != null &&
                    SortId.Equals(input.SortId)
                ) && 
                (
                    MinNumOptions == input.MinNumOptions ||
                    MinNumOptions != null &&
                    MinNumOptions.Equals(input.MinNumOptions)
                ) && 
                (
                    MaxNumOptions == input.MaxNumOptions ||
                    MaxNumOptions != null &&
                    MaxNumOptions.Equals(input.MaxNumOptions)
                ) && 
                (
                    NumFreeOptions == input.NumFreeOptions ||
                    NumFreeOptions != null &&
                    NumFreeOptions.Equals(input.NumFreeOptions)
                ) && 
                (
                    MinOptionChoiceQuantity == input.MinOptionChoiceQuantity ||
                    MinOptionChoiceQuantity != null &&
                    MinOptionChoiceQuantity.Equals(input.MinOptionChoiceQuantity)
                ) && 
                (
                    MaxOptionChoiceQuantity == input.MaxOptionChoiceQuantity ||
                    MaxOptionChoiceQuantity != null &&
                    MaxOptionChoiceQuantity.Equals(input.MaxOptionChoiceQuantity)
                ) && 
                (
                    MinAggregateOptionsQuantity == input.MinAggregateOptionsQuantity ||
                    MinAggregateOptionsQuantity != null &&
                    MinAggregateOptionsQuantity.Equals(input.MinAggregateOptionsQuantity)
                ) && 
                (
                    MaxAggregateOptionsQuantity == input.MaxAggregateOptionsQuantity ||
                    MaxAggregateOptionsQuantity != null &&
                    MaxAggregateOptionsQuantity.Equals(input.MaxAggregateOptionsQuantity)
                ) && 
                (
                    Options == input.Options ||
                    Options != null &&
                    Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                if (SortId != null)
                    hashCode = hashCode * 59 + SortId.GetHashCode();
                if (MinNumOptions != null)
                    hashCode = hashCode * 59 + MinNumOptions.GetHashCode();
                if (MaxNumOptions != null)
                    hashCode = hashCode * 59 + MaxNumOptions.GetHashCode();
                if (NumFreeOptions != null)
                    hashCode = hashCode * 59 + NumFreeOptions.GetHashCode();
                if (MinOptionChoiceQuantity != null)
                    hashCode = hashCode * 59 + MinOptionChoiceQuantity.GetHashCode();
                if (MaxOptionChoiceQuantity != null)
                    hashCode = hashCode * 59 + MaxOptionChoiceQuantity.GetHashCode();
                if (MinAggregateOptionsQuantity != null)
                    hashCode = hashCode * 59 + MinAggregateOptionsQuantity.GetHashCode();
                if (MaxAggregateOptionsQuantity != null)
                    hashCode = hashCode * 59 + MaxAggregateOptionsQuantity.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
