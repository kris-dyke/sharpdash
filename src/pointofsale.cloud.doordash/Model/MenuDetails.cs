/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// MenuDetails
    /// </summary>
    [DataContract]
    public class MenuDetails :  IEquatable<MenuDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuDetails" /> class.
        /// </summary>
        /// <param name="menuId">Menu identifier.</param>
        /// <param name="name">Menu name.</param>
        /// <param name="subtitle">Menu subtitle.</param>
        /// <param name="isActive">Menu is active.</param>
        /// <param name="isPosMenu">Menu was created via POS.</param>
        /// <param name="latestMenuUpdate">Latest menu update.</param>
        /// <param name="lastSuccessfulMenuUpdateAt">Time of last successful menu update.</param>
        /// <param name="url">Menu preview URL.</param>
        /// <param name="openHours">Menu hours.</param>
        /// <param name="specialHours">Menu special hours.</param>
        public MenuDetails(string menuId = default(string), string name = default(string), string subtitle = default(string), bool? isActive = default(bool?), bool? isPosMenu = default(bool?), Object latestMenuUpdate = default(Object), DateTime? lastSuccessfulMenuUpdateAt = default(DateTime?), string url = default(string), List<StoreOpenHour> openHours = default(List<StoreOpenHour>), List<StoreSpecialHour> specialHours = default(List<StoreSpecialHour>))
        {
            MenuId = menuId;
            Name = name;
            Subtitle = subtitle;
            IsActive = isActive;
            IsPosMenu = isPosMenu;
            LatestMenuUpdate = latestMenuUpdate;
            LastSuccessfulMenuUpdateAt = lastSuccessfulMenuUpdateAt;
            Url = url;
            OpenHours = openHours;
            SpecialHours = specialHours;
        }
        
        /// <summary>
        /// Menu identifier
        /// </summary>
        /// <value>Menu identifier</value>
        [DataMember(Name="menu_id", EmitDefaultValue=false)]
        public string MenuId { get; set; }

        /// <summary>
        /// Menu name
        /// </summary>
        /// <value>Menu name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Menu subtitle
        /// </summary>
        /// <value>Menu subtitle</value>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Menu is active
        /// </summary>
        /// <value>Menu is active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Menu was created via POS
        /// </summary>
        /// <value>Menu was created via POS</value>
        [DataMember(Name="is_pos_menu", EmitDefaultValue=false)]
        public bool? IsPosMenu { get; set; }

        /// <summary>
        /// Latest menu update
        /// </summary>
        /// <value>Latest menu update</value>
        [DataMember(Name="latest_menu_update", EmitDefaultValue=false)]
        public Object LatestMenuUpdate { get; set; }

        /// <summary>
        /// Time of last successful menu update
        /// </summary>
        /// <value>Time of last successful menu update</value>
        [DataMember(Name="last_successful_menu_update_at", EmitDefaultValue=false)]
        public DateTime? LastSuccessfulMenuUpdateAt { get; set; }

        /// <summary>
        /// Menu preview URL
        /// </summary>
        /// <value>Menu preview URL</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Menu hours
        /// </summary>
        /// <value>Menu hours</value>
        [DataMember(Name="open_hours", EmitDefaultValue=false)]
        public List<StoreOpenHour> OpenHours { get; set; }

        /// <summary>
        /// Menu special hours
        /// </summary>
        /// <value>Menu special hours</value>
        [DataMember(Name="special_hours", EmitDefaultValue=false)]
        public List<StoreSpecialHour> SpecialHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuDetails {\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsPosMenu: ").Append(IsPosMenu).Append("\n");
            sb.Append("  LatestMenuUpdate: ").Append(LatestMenuUpdate).Append("\n");
            sb.Append("  LastSuccessfulMenuUpdateAt: ").Append(LastSuccessfulMenuUpdateAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  OpenHours: ").Append(OpenHours).Append("\n");
            sb.Append("  SpecialHours: ").Append(SpecialHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as MenuDetails);
        }

        /// <summary>
        /// Returns true if MenuDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MenuDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    MenuId == input.MenuId ||
                    MenuId != null &&
                    MenuId.Equals(input.MenuId)
                ) && 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    Subtitle == input.Subtitle ||
                    Subtitle != null &&
                    Subtitle.Equals(input.Subtitle)
                ) && 
                (
                    IsActive == input.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(input.IsActive)
                ) && 
                (
                    IsPosMenu == input.IsPosMenu ||
                    IsPosMenu != null &&
                    IsPosMenu.Equals(input.IsPosMenu)
                ) && 
                (
                    LatestMenuUpdate == input.LatestMenuUpdate ||
                    LatestMenuUpdate != null &&
                    LatestMenuUpdate.Equals(input.LatestMenuUpdate)
                ) && 
                (
                    LastSuccessfulMenuUpdateAt == input.LastSuccessfulMenuUpdateAt ||
                    LastSuccessfulMenuUpdateAt != null &&
                    LastSuccessfulMenuUpdateAt.Equals(input.LastSuccessfulMenuUpdateAt)
                ) && 
                (
                    Url == input.Url ||
                    Url != null &&
                    Url.Equals(input.Url)
                ) && 
                (
                    OpenHours == input.OpenHours ||
                    OpenHours != null &&
                    OpenHours.SequenceEqual(input.OpenHours)
                ) && 
                (
                    SpecialHours == input.SpecialHours ||
                    SpecialHours != null &&
                    SpecialHours.SequenceEqual(input.SpecialHours)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (MenuId != null)
                    hashCode = hashCode * 59 + MenuId.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Subtitle != null)
                    hashCode = hashCode * 59 + Subtitle.GetHashCode();
                if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                if (IsPosMenu != null)
                    hashCode = hashCode * 59 + IsPosMenu.GetHashCode();
                if (LatestMenuUpdate != null)
                    hashCode = hashCode * 59 + LatestMenuUpdate.GetHashCode();
                if (LastSuccessfulMenuUpdateAt != null)
                    hashCode = hashCode * 59 + LastSuccessfulMenuUpdateAt.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (OpenHours != null)
                    hashCode = hashCode * 59 + OpenHours.GetHashCode();
                if (SpecialHours != null)
                    hashCode = hashCode * 59 + SpecialHours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
