/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// StoreSpecialHour
    /// </summary>
    [DataContract]
    public class StoreSpecialHour :  IEquatable<StoreSpecialHour>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreSpecialHour" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="closed">Indicates if store is closed or opened at this special hour.</param>
        /// <param name="startTime">Start time in format HH:MM:SS.</param>
        /// <param name="endTime">End time in format HH:MM:SS.</param>
        public StoreSpecialHour(string date = default(string), bool? closed = default(bool?), string startTime = default(string), string endTime = default(string))
        {
            Date = date;
            Closed = closed;
            StartTime = startTime;
            EndTime = endTime;
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Indicates if store is closed or opened at this special hour
        /// </summary>
        /// <value>Indicates if store is closed or opened at this special hour</value>
        [DataMember(Name="closed", EmitDefaultValue=false)]
        public bool? Closed { get; set; }

        /// <summary>
        /// Start time in format HH:MM:SS
        /// </summary>
        /// <value>Start time in format HH:MM:SS</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// End time in format HH:MM:SS
        /// </summary>
        /// <value>End time in format HH:MM:SS</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreSpecialHour {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StoreSpecialHour);
        }

        /// <summary>
        /// Returns true if StoreSpecialHour instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreSpecialHour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreSpecialHour input)
        {
            if (input == null)
                return false;

            return 
                (
                    Date == input.Date ||
                    Date != null &&
                    Date.Equals(input.Date)
                ) && 
                (
                    Closed == input.Closed ||
                    Closed != null &&
                    Closed.Equals(input.Closed)
                ) && 
                (
                    StartTime == input.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(input.StartTime)
                ) && 
                (
                    EndTime == input.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(input.EndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                if (Closed != null)
                    hashCode = hashCode * 59 + Closed.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
