/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// StoreMenuInfo
    /// </summary>
    [DataContract]
    public class StoreMenuInfo :  IEquatable<StoreMenuInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreMenuInfo" /> class.
        /// </summary>
        /// <param name="providerName">Provider name.</param>
        /// <param name="merchantSuppliedId">Partner specified ID for the store.</param>
        /// <param name="menus">Active menus.</param>
        public StoreMenuInfo(string providerName = default(string), string merchantSuppliedId = default(string), List<MenuDetails> menus = default(List<MenuDetails>))
        {
            ProviderName = providerName;
            MerchantSuppliedId = merchantSuppliedId;
            Menus = menus;
        }
        
        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [DataMember(Name="provider_name", EmitDefaultValue=false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Partner specified ID for the store
        /// </summary>
        /// <value>Partner specified ID for the store</value>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Active menus
        /// </summary>
        /// <value>Active menus</value>
        [DataMember(Name="menus", EmitDefaultValue=false)]
        public List<MenuDetails> Menus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreMenuInfo {\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Menus: ").Append(Menus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StoreMenuInfo);
        }

        /// <summary>
        /// Returns true if StoreMenuInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreMenuInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreMenuInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    ProviderName == input.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(input.ProviderName)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Menus == input.Menus ||
                    Menus != null &&
                    Menus.SequenceEqual(input.Menus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Menus != null)
                    hashCode = hashCode * 59 + Menus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
