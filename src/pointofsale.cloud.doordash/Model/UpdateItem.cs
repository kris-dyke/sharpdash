/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// UpdateItem
    /// </summary>
    [DataContract]
    public class UpdateItem :  IEquatable<UpdateItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItem" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItem" /> class.
        /// </summary>
        /// <param name="merchantSuppliedId">merchantSuppliedId.</param>
        /// <param name="isSuspended">isSuspended (required).</param>
        /// <param name="price">price.</param>
        public UpdateItem(string merchantSuppliedId = default(string), bool? isSuspended = default(bool?), int? price = default(int?))
        {
            // to ensure "isSuspended" is required (not null)
            if (isSuspended == null)
            {
                throw new InvalidDataException("isSuspended is a required property for UpdateItem and cannot be null");
            }
            else
            {
                IsSuspended = isSuspended;
            }
            MerchantSuppliedId = merchantSuppliedId;
            Price = price;
        }
        
        /// <summary>
        /// Gets or Sets MerchantSuppliedId
        /// </summary>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets IsSuspended
        /// </summary>
        [DataMember(Name="is_suspended", EmitDefaultValue=false)]
        public bool? IsSuspended { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public int? Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateItem {\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  IsSuspended: ").Append(IsSuspended).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UpdateItem);
        }

        /// <summary>
        /// Returns true if UpdateItem instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    IsSuspended == input.IsSuspended ||
                    IsSuspended != null &&
                    IsSuspended.Equals(input.IsSuspended)
                ) && 
                (
                    Price == input.Price ||
                    Price != null &&
                    Price.Equals(input.Price)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (IsSuspended != null)
                    hashCode = hashCode * 59 + IsSuspended.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
