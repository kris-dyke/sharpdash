/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// NestedOrderItemExtra
    /// </summary>
    [DataContract]
    public class NestedOrderItemExtra :  IEquatable<NestedOrderItemExtra>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NestedOrderItemExtra" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="merchantSuppliedId">merchantSuppliedId.</param>
        /// <param name="options">options.</param>
        public NestedOrderItemExtra(string name = default(string), string merchantSuppliedId = default(string), List<NestedOrderItemExtraOption> options = default(List<NestedOrderItemExtraOption>))
        {
            Name = name;
            MerchantSuppliedId = merchantSuppliedId;
            Options = options;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MerchantSuppliedId
        /// </summary>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<NestedOrderItemExtraOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NestedOrderItemExtra {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NestedOrderItemExtra);
        }

        /// <summary>
        /// Returns true if NestedOrderItemExtra instances are equal
        /// </summary>
        /// <param name="input">Instance of NestedOrderItemExtra to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NestedOrderItemExtra input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Options == input.Options ||
                    Options != null &&
                    Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
