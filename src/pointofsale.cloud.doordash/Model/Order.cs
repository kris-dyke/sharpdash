/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Defines CommissionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommissionTypeEnum
        {
            
            /// <summary>
            /// Enum Regular for value: regular
            /// </summary>
            [EnumMember(Value = "regular")]
            Regular = 1,
            
            /// <summary>
            /// Enum Dashpass for value: dashpass
            /// </summary>
            [EnumMember(Value = "dashpass")]
            Dashpass = 2
        }

        /// <summary>
        /// Gets or Sets CommissionType
        /// </summary>
        [DataMember(Name="commission_type", EmitDefaultValue=false)]
        public CommissionTypeEnum? CommissionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="consumer">consumer.</param>
        /// <param name="store">store.</param>
        /// <param name="subtotal">subtotal.</param>
        /// <param name="tax">tax.</param>
        /// <param name="estimatedPickupTime">estimatedPickupTime.</param>
        /// <param name="isPickup">isPickup.</param>
        /// <param name="categories">categories.</param>
        /// <param name="isTaxRemittedByDoordash">isTaxRemittedByDoordash.</param>
        /// <param name="taxAmountRemittedByDoordash">taxAmountRemittedByDoordash.</param>
        /// <param name="commissionType">commissionType.</param>
        /// <param name="deliveryShortCode">short code for dasher to identify an order.</param>
        public Order(string id = default(string), Consumer consumer = default(Consumer), Store store = default(Store), int? subtotal = default(int?), int? tax = default(int?), DateTime? estimatedPickupTime = default(DateTime?), bool? isPickup = default(bool?), List<OrderMenuCategory> categories = default(List<OrderMenuCategory>), bool? isTaxRemittedByDoordash = default(bool?), int? taxAmountRemittedByDoordash = default(int?), CommissionTypeEnum? commissionType = default(CommissionTypeEnum?), string deliveryShortCode = default(string))
        {
            Id = id;
            Consumer = consumer;
            Store = store;
            Subtotal = subtotal;
            Tax = tax;
            EstimatedPickupTime = estimatedPickupTime;
            IsPickup = isPickup;
            Categories = categories;
            IsTaxRemittedByDoordash = isTaxRemittedByDoordash;
            TaxAmountRemittedByDoordash = taxAmountRemittedByDoordash;
            CommissionType = commissionType;
            DeliveryShortCode = deliveryShortCode;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name="consumer", EmitDefaultValue=false)]
        public Consumer Consumer { get; set; }

        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name="store", EmitDefaultValue=false)]
        public Store Store { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name="subtotal", EmitDefaultValue=false)]
        public int? Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public int? Tax { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedPickupTime
        /// </summary>
        [DataMember(Name="estimated_pickup_time", EmitDefaultValue=false)]
        public DateTime? EstimatedPickupTime { get; set; }

        /// <summary>
        /// Gets or Sets IsPickup
        /// </summary>
        [DataMember(Name="is_pickup", EmitDefaultValue=false)]
        public bool? IsPickup { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<OrderMenuCategory> Categories { get; set; }

        /// <summary>
        /// Gets or Sets IsTaxRemittedByDoordash
        /// </summary>
        [DataMember(Name="is_tax_remitted_by_doordash", EmitDefaultValue=false)]
        public bool? IsTaxRemittedByDoordash { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmountRemittedByDoordash
        /// </summary>
        [DataMember(Name="tax_amount_remitted_by_doordash", EmitDefaultValue=false)]
        public int? TaxAmountRemittedByDoordash { get; set; }


        /// <summary>
        /// short code for dasher to identify an order
        /// </summary>
        /// <value>short code for dasher to identify an order</value>
        [DataMember(Name="delivery_short_code", EmitDefaultValue=false)]
        public string DeliveryShortCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Consumer: ").Append(Consumer).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  EstimatedPickupTime: ").Append(EstimatedPickupTime).Append("\n");
            sb.Append("  IsPickup: ").Append(IsPickup).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  IsTaxRemittedByDoordash: ").Append(IsTaxRemittedByDoordash).Append("\n");
            sb.Append("  TaxAmountRemittedByDoordash: ").Append(TaxAmountRemittedByDoordash).Append("\n");
            sb.Append("  CommissionType: ").Append(CommissionType).Append("\n");
            sb.Append("  DeliveryShortCode: ").Append(DeliveryShortCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    Id != null &&
                    Id.Equals(input.Id)
                ) && 
                (
                    Consumer == input.Consumer ||
                    Consumer != null &&
                    Consumer.Equals(input.Consumer)
                ) && 
                (
                    Store == input.Store ||
                    Store != null &&
                    Store.Equals(input.Store)
                ) && 
                (
                    Subtotal == input.Subtotal ||
                    Subtotal != null &&
                    Subtotal.Equals(input.Subtotal)
                ) && 
                (
                    Tax == input.Tax ||
                    Tax != null &&
                    Tax.Equals(input.Tax)
                ) && 
                (
                    EstimatedPickupTime == input.EstimatedPickupTime ||
                    EstimatedPickupTime != null &&
                    EstimatedPickupTime.Equals(input.EstimatedPickupTime)
                ) && 
                (
                    IsPickup == input.IsPickup ||
                    IsPickup != null &&
                    IsPickup.Equals(input.IsPickup)
                ) && 
                (
                    Categories == input.Categories ||
                    Categories != null &&
                    Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    IsTaxRemittedByDoordash == input.IsTaxRemittedByDoordash ||
                    IsTaxRemittedByDoordash != null &&
                    IsTaxRemittedByDoordash.Equals(input.IsTaxRemittedByDoordash)
                ) && 
                (
                    TaxAmountRemittedByDoordash == input.TaxAmountRemittedByDoordash ||
                    TaxAmountRemittedByDoordash != null &&
                    TaxAmountRemittedByDoordash.Equals(input.TaxAmountRemittedByDoordash)
                ) && 
                (
                    CommissionType == input.CommissionType ||
                    CommissionType != null &&
                    CommissionType.Equals(input.CommissionType)
                ) && 
                (
                    DeliveryShortCode == input.DeliveryShortCode ||
                    DeliveryShortCode != null &&
                    DeliveryShortCode.Equals(input.DeliveryShortCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Consumer != null)
                    hashCode = hashCode * 59 + Consumer.GetHashCode();
                if (Store != null)
                    hashCode = hashCode * 59 + Store.GetHashCode();
                if (Subtotal != null)
                    hashCode = hashCode * 59 + Subtotal.GetHashCode();
                if (Tax != null)
                    hashCode = hashCode * 59 + Tax.GetHashCode();
                if (EstimatedPickupTime != null)
                    hashCode = hashCode * 59 + EstimatedPickupTime.GetHashCode();
                if (IsPickup != null)
                    hashCode = hashCode * 59 + IsPickup.GetHashCode();
                if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                if (IsTaxRemittedByDoordash != null)
                    hashCode = hashCode * 59 + IsTaxRemittedByDoordash.GetHashCode();
                if (TaxAmountRemittedByDoordash != null)
                    hashCode = hashCode * 59 + TaxAmountRemittedByDoordash.GetHashCode();
                if (CommissionType != null)
                    hashCode = hashCode * 59 + CommissionType.GetHashCode();
                if (DeliveryShortCode != null)
                    hashCode = hashCode * 59 + DeliveryShortCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
