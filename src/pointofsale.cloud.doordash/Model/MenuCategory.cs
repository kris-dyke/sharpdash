/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// MenuCategory
    /// </summary>
    [DataContract]
    public class MenuCategory :  IEquatable<MenuCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuCategory" /> class.
        /// </summary>
        /// <param name="name">the given name of this instance.</param>
        /// <param name="subtitle">subtitle.</param>
        /// <param name="merchantSuppliedId">ID as it&#39;s stored in your system.</param>
        /// <param name="active">active (default to true).</param>
        /// <param name="sortId">sortId.</param>
        /// <param name="items">items.</param>
        public MenuCategory(string name = default(string), string subtitle = default(string), string merchantSuppliedId = default(string), bool? active = true, int? sortId = default(int?), List<Item> items = default(List<Item>))
        {
            Name = name;
            Subtitle = subtitle;
            MerchantSuppliedId = merchantSuppliedId;
            // use default value if no "active" provided
            if (active == null)
            {
                Active = true;
            }
            else
            {
                Active = active;
            }
            SortId = sortId;
            Items = items;
        }
        
        /// <summary>
        /// the given name of this instance
        /// </summary>
        /// <value>the given name of this instance</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Subtitle
        /// </summary>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// ID as it&#39;s stored in your system
        /// </summary>
        /// <value>ID as it&#39;s stored in your system</value>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets SortId
        /// </summary>
        [DataMember(Name="sort_id", EmitDefaultValue=false)]
        public int? SortId { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenuCategory {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  SortId: ").Append(SortId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as MenuCategory);
        }

        /// <summary>
        /// Returns true if MenuCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of MenuCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenuCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    Subtitle == input.Subtitle ||
                    Subtitle != null &&
                    Subtitle.Equals(input.Subtitle)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Active == input.Active ||
                    Active != null &&
                    Active.Equals(input.Active)
                ) && 
                (
                    SortId == input.SortId ||
                    SortId != null &&
                    SortId.Equals(input.SortId)
                ) && 
                (
                    Items == input.Items ||
                    Items != null &&
                    Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Subtitle != null)
                    hashCode = hashCode * 59 + Subtitle.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                if (SortId != null)
                    hashCode = hashCode * 59 + SortId.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
