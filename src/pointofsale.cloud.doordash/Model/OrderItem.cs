/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract]
    public class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="merchantSuppliedId">merchantSuppliedId.</param>
        /// <param name="price">price.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="extras">extras.</param>
        /// <param name="consumerName">For group order, first name of the individual is present.</param>
        /// <param name="specialInstructions">customer input instructions for the item.</param>
        public OrderItem(string name = default(string), string merchantSuppliedId = default(string), int? price = default(int?), int? quantity = default(int?), List<OrderItemExtra> extras = default(List<OrderItemExtra>), string consumerName = default(string), string specialInstructions = default(string))
        {
            Name = name;
            MerchantSuppliedId = merchantSuppliedId;
            Price = price;
            Quantity = quantity;
            Extras = extras;
            ConsumerName = consumerName;
            SpecialInstructions = specialInstructions;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MerchantSuppliedId
        /// </summary>
        [DataMember(Name="merchant_supplied_id", EmitDefaultValue=false)]
        public string MerchantSuppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public int? Price { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Extras
        /// </summary>
        [DataMember(Name="extras", EmitDefaultValue=false)]
        public List<OrderItemExtra> Extras { get; set; }

        /// <summary>
        /// For group order, first name of the individual is present
        /// </summary>
        /// <value>For group order, first name of the individual is present</value>
        [DataMember(Name="consumer_name", EmitDefaultValue=false)]
        public string ConsumerName { get; set; }

        /// <summary>
        /// customer input instructions for the item
        /// </summary>
        /// <value>customer input instructions for the item</value>
        [DataMember(Name="special_instructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MerchantSuppliedId: ").Append(MerchantSuppliedId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Extras: ").Append(Extras).Append("\n");
            sb.Append("  ConsumerName: ").Append(ConsumerName).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    MerchantSuppliedId == input.MerchantSuppliedId ||
                    MerchantSuppliedId != null &&
                    MerchantSuppliedId.Equals(input.MerchantSuppliedId)
                ) && 
                (
                    Price == input.Price ||
                    Price != null &&
                    Price.Equals(input.Price)
                ) && 
                (
                    Quantity == input.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(input.Quantity)
                ) && 
                (
                    Extras == input.Extras ||
                    Extras != null &&
                    Extras.SequenceEqual(input.Extras)
                ) && 
                (
                    ConsumerName == input.ConsumerName ||
                    ConsumerName != null &&
                    ConsumerName.Equals(input.ConsumerName)
                ) && 
                (
                    SpecialInstructions == input.SpecialInstructions ||
                    SpecialInstructions != null &&
                    SpecialInstructions.Equals(input.SpecialInstructions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (MerchantSuppliedId != null)
                    hashCode = hashCode * 59 + MerchantSuppliedId.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (Extras != null)
                    hashCode = hashCode * 59 + Extras.GetHashCode();
                if (ConsumerName != null)
                    hashCode = hashCode * 59 + ConsumerName.GetHashCode();
                if (SpecialInstructions != null)
                    hashCode = hashCode * 59 + SpecialInstructions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
