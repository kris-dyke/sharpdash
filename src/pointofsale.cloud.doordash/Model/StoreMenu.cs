/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace pointofsale.cloud.doordash.Model
{
    /// <summary>
    /// StoreMenu
    /// </summary>
    [DataContract]
    public class StoreMenu :  IEquatable<StoreMenu>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreMenu" /> class.
        /// </summary>
        [JsonConstructor]
        protected StoreMenu() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreMenu" /> class.
        /// </summary>
        /// <param name="reference">reference.</param>
        /// <param name="store">store (required).</param>
        /// <param name="openHours">openHours (required).</param>
        /// <param name="specialHours">specialHours (required).</param>
        /// <param name="menu">menu.</param>
        public StoreMenu(string reference = default(string), Store store = default(Store), List<StoreOpenHour> openHours = default(List<StoreOpenHour>), List<StoreSpecialHour> specialHours = default(List<StoreSpecialHour>), Menu menu = default(Menu))
        {
            // to ensure "store" is required (not null)
            if (store == null)
            {
                throw new InvalidDataException("store is a required property for StoreMenu and cannot be null");
            }
            else
            {
                Store = store;
            }
            // to ensure "openHours" is required (not null)
            if (openHours == null)
            {
                throw new InvalidDataException("openHours is a required property for StoreMenu and cannot be null");
            }
            else
            {
                OpenHours = openHours;
            }
            // to ensure "specialHours" is required (not null)
            if (specialHours == null)
            {
                throw new InvalidDataException("specialHours is a required property for StoreMenu and cannot be null");
            }
            else
            {
                SpecialHours = specialHours;
            }
            Reference = reference;
            Menu = menu;
        }
        
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Store
        /// </summary>
        [DataMember(Name="store", EmitDefaultValue=false)]
        public Store Store { get; set; }

        /// <summary>
        /// Gets or Sets OpenHours
        /// </summary>
        [DataMember(Name="open_hours", EmitDefaultValue=false)]
        public List<StoreOpenHour> OpenHours { get; set; }

        /// <summary>
        /// Gets or Sets SpecialHours
        /// </summary>
        [DataMember(Name="special_hours", EmitDefaultValue=false)]
        public List<StoreSpecialHour> SpecialHours { get; set; }

        /// <summary>
        /// Gets or Sets Menu
        /// </summary>
        [DataMember(Name="menu", EmitDefaultValue=false)]
        public Menu Menu { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreMenu {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Store: ").Append(Store).Append("\n");
            sb.Append("  OpenHours: ").Append(OpenHours).Append("\n");
            sb.Append("  SpecialHours: ").Append(SpecialHours).Append("\n");
            sb.Append("  Menu: ").Append(Menu).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StoreMenu);
        }

        /// <summary>
        /// Returns true if StoreMenu instances are equal
        /// </summary>
        /// <param name="input">Instance of StoreMenu to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreMenu input)
        {
            if (input == null)
                return false;

            return 
                (
                    Reference == input.Reference ||
                    Reference != null &&
                    Reference.Equals(input.Reference)
                ) && 
                (
                    Store == input.Store ||
                    Store != null &&
                    Store.Equals(input.Store)
                ) && 
                (
                    OpenHours == input.OpenHours ||
                    OpenHours != null &&
                    OpenHours.SequenceEqual(input.OpenHours)
                ) && 
                (
                    SpecialHours == input.SpecialHours ||
                    SpecialHours != null &&
                    SpecialHours.SequenceEqual(input.SpecialHours)
                ) && 
                (
                    Menu == input.Menu ||
                    Menu != null &&
                    Menu.Equals(input.Menu)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                if (Store != null)
                    hashCode = hashCode * 59 + Store.GetHashCode();
                if (OpenHours != null)
                    hashCode = hashCode * 59 + OpenHours.GetHashCode();
                if (SpecialHours != null)
                    hashCode = hashCode * 59 + SpecialHours.GetHashCode();
                if (Menu != null)
                    hashCode = hashCode * 59 + Menu.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
